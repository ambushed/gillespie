import unittest
from gillespie import Gillespie
from gillespie import Setup
import autograd.numpy as np

class GillespieTestSuiteRegression(unittest.TestCase):

    def testLotkaVolterra10paths15years(self):
        setup = Setup(yaml_file_name="lotka_volterra.yaml")
        propensities = setup.get_propensity_list()
        parameters = setup.get_parameter_list()
        species = setup.get_species()
        incr = setup.get_increments()
        nPaths = setup.get_number_of_paths()
        T = setup.get_time_horizon()
        seed = 4000
        my_gillespieUp = Gillespie(species=species, propensities=propensities, increments=incr, nPaths=nPaths,
                                   T=T, useSmoothing=False, numProc = 2, seed = seed)

        parameters = np.array(parameters)
        result = my_gillespieUp.run_simulation(np.log(parameters))
        expected = [1286.2, 1300.4000000000001, 920.70000000000005, 518.79999999999995, 283.19999999999999,
                   179.09999999999999, 133.69999999999999, 126.3, 132.09999999999999, 151.59999999999999,
                   192.30000000000001, 250.30000000000001, 349.10000000000002, 477.69999999999999, 665.70000000000005,
                   902.20000000000005, 1125.5999999999999, 1202.5999999999999, 1009.7, 668.0, 386.60000000000002,
                   218.69999999999999, 158.19999999999999, 137.69999999999999, 133.0, 154.0, 190.30000000000001,
                   247.69999999999999, 335.19999999999999, 458.30000000000001, 629.10000000000002, 824.5, 1019.7,
                   1107.5, 986.20000000000005, 749.89999999999998, 530.20000000000005, 362.39999999999998, 228.5,
                   152.90000000000001, 145.0, 152.90000000000001, 180.80000000000001, 239.19999999999999,
                   324.89999999999998, 448.80000000000001, 603.79999999999995, 768.60000000000002, 898.0,
                   925.79999999999995, 736.89999999999998, 1225.5, 1817.4000000000001, 2056.1999999999998,
                   1912.0999999999999, 1618.2, 1316.2, 1050.5, 844.79999999999995, 680.89999999999998,
                   560.29999999999995, 476.80000000000001, 426.0, 413.10000000000002, 438.60000000000002,
                   523.89999999999998, 728.70000000000005, 1099.7, 1568.8, 1888.9000000000001, 1921.2, 1705.5,
                   1417.9000000000001, 1145.7, 912.29999999999995, 736.60000000000002, 606.29999999999995,
                   514.39999999999998, 452.10000000000002, 430.0, 447.39999999999998, 537.79999999999995,
                   716.89999999999998, 1020.1, 1412.0, 1707.3, 1787.8, 1691.5999999999999, 1510.8, 1289.0,
                   1039.9000000000001, 841.60000000000002, 678.5, 563.29999999999995, 480.30000000000001,
                   453.10000000000002, 478.39999999999998, 574.79999999999995, 753.39999999999998, 1011.3]

        expectedMeanA = expected[:50]
        expectedMeanB = expected[50:]
        aMean = result[:50]
        bMean = result[50:]
        self.assertListEqual(aMean, expectedMeanA)
        self.assertListEqual(bMean, expectedMeanB)

    def testLotkaVolterraAutoGrad(self):

        setup = Setup(yaml_file_name="lotka_volterra.yaml")
        propensities = setup.get_propensity_list()
        parameters = setup.get_parameter_list()
        species = setup.get_species()
        incr = setup.get_increments()
        nPaths = 2
        seed = 4000
        T = 2.0

        parameters = np.array(parameters)

        gillespieGrad = Gillespie(species=species,propensities=propensities,increments=incr, nPaths = nPaths,T=T,useSmoothing=True,numProc=2, seed=seed)
        gradient = gillespieGrad.take_gradients(np.log(parameters))

        expected = [0.20615962712971669, 0.20765962497976251, 0.20946011564211109, 0.21122237250866763,
                   0.21271498482749313, 0.21392790067199691, 0.21528167987721566, 0.21603052898934599,
                   0.21619002616732488, 0.21593366162777286, 0.21431382211027214, 0.21232744626914085,
                   0.20941947198379829, 0.20569528017780836, 0.20198804967734646, 0.19782879598031705,
                   0.19273933086092887, 0.18682312655389927, 0.18046445965388652, 0.17373455050780809,
                   0.16832865071045217, 0.16163945467500102, 0.15411017846684341, 0.14637395928836641,
                   0.13999619931889651, 0.13434352889317916, 0.12973079069693791, 0.12472494369865716,
                   0.11864049145070416, 0.11693571817008117, 0.11136909226629289, 0.10493149365483032,
                   0.099493702120565852, 0.096488468308710551, 0.093129843707841248, 0.090474135397145286,
                   0.086506517094886853, 0.083908916439975736, 0.081825525522875781, 0.07934883804676035,
                   0.077156280645664127, 0.076945783694636519, 0.077923567821089959, 0.077004392805645305,
                   0.073312047666948377, 0.07322663146233567, 0.072017186732203545, 0.073091808221720983,
                   0.073594761425243266, 0.07342130208607961, -0.043071837334703933, -0.045499513416124661,
                   -0.047718738038394479, -0.050267710888567074, -0.052334217897043872, -0.053840055942464084,
                   -0.055532451320430942, -0.057028491213380397, -0.058111904191807659, -0.058748742917393806,
                   -0.058331761936852106, -0.057837116806418107, -0.056625170150056033, -0.054909082748279187,
                   -0.053437863376708181, -0.051592987336381804, -0.049093610942194728, -0.045911985658227718,
                   -0.042427798536834344, -0.038432146999374014, -0.035268479676402349, -0.031224455453222236,
                   -0.026231674281399983, -0.021230991193482547, -0.016647084887854175, -0.012706494726105327,
                   -0.0094710026475857273, -0.0060359239347013358, -0.0020313412506098904, -0.00022615184835709254,
                   0.0035483280672937672, 0.007504612369761042, 0.010864058951210264, 0.012950598227953539,
                   0.01494874217619022, 0.016592385276217678, 0.018866038143373419, 0.02035100985642363,
                   0.02193197163332701, 0.023354613395955355, 0.024600718036499346, 0.02539033829510931,
                   0.026163242225291435, 0.027224697961138061, 0.028418382870517137, 0.029257015003727668,
                   0.030139111120656873, 0.030801964019728335, 0.031590325099204397, 0.032331250303571805]

        expectedGradA = expected[:50]
        expectedGradB = expected[50:]

        aGradient = gradient[:50]
        bGradient = gradient[50:]

        self.assertListEqual(list(zip(*aGradient)[0]), expectedGradA)
        self.assertListEqual(list(zip(*bGradient)[0]), expectedGradB)

if __name__ == "__main__":
    suite = unittest.TestSuite()
    suite.addTest(GillespieTestSuiteRegression())
    unittest.TextTestRunner().run(suite)


